[
    {
        "id": "52813cb27ee7a04f",
        "type": "tab",
        "label": "MQTT Handler",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6d95658a7bc87260",
        "type": "tab",
        "label": "Alert Handler",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1db12a15ff463015",
        "type": "tab",
        "label": "Get Weather data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7b9f7c363480fe4d",
        "type": "tab",
        "label": "Trigger Smart Life Devices",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7eb49c80f3c13dfe",
        "type": "group",
        "z": "7b9f7c363480fe4d",
        "name": "IDs Setup and Get Access Token",
        "style": {
            "fill": "#ffefbf",
            "label": true,
            "stroke": "#ffC000"
        },
        "nodes": [
            "1ddaa0de66e2f186",
            "82b23c7906a733a6",
            "fc645a560a7d65ba",
            "18ad8de8e5b0317d",
            "a6df3261001f3b45",
            "82e3e80093cc5364",
            "a81a9187a8cbc358",
            "31d11b335763e7e0",
            "e32195188da1da03"
        ],
        "x": 14,
        "y": 39,
        "w": 1312,
        "h": 182
    },
    {
        "id": "63b3192eee14fbc2",
        "type": "mqtt-broker",
        "name": "Vidal MQTT Broker",
        "broker": "wso.vidalsolution.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "cb46eb49b0641803",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "influxdb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.8-flux",
        "url": "http://influxdb:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "9cc82476d54e80d9",
        "type": "mqtt in",
        "z": "52813cb27ee7a04f",
        "name": "Vidal MQTT Broker",
        "topic": "/milesight/uplink",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "63b3192eee14fbc2",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 300,
        "wires": [
            [
                "9ba7c5b18fc1083a",
                "a3a12e0784e2d395"
            ]
        ]
    },
    {
        "id": "ea4d99d2ba299342",
        "type": "debug",
        "z": "52813cb27ee7a04f",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 220,
        "wires": []
    },
    {
        "id": "7542ddd7b85e7b75",
        "type": "inject",
        "z": "52813cb27ee7a04f",
        "name": "",
        "props": [
            {
                "p": "payload.co2",
                "v": "820",
                "vt": "num"
            },
            {
                "p": "payload.humidity",
                "v": "23",
                "vt": "num"
            },
            {
                "p": "payload.temperature",
                "v": "20",
                "vt": "num"
            },
            {
                "p": "payload.devEUI",
                "v": "24e124710c140971",
                "vt": "str"
            },
            {
                "p": "payload.deviceName",
                "v": "AM319-Sensor_1",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload.time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "test",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "a3a12e0784e2d395"
            ]
        ]
    },
    {
        "id": "a3a12e0784e2d395",
        "type": "function",
        "z": "52813cb27ee7a04f",
        "name": "function 1",
        "func": "var payload = msg.payload;\n\npayload.temp = payload.temperature;\ndelete payload.temperature;\n\nvar device = {\n    deviceName: payload.deviceName,\n    deviceID: payload.devEUI\n}\n\npayload.time = new Date(payload.time).getTime();\n\ndelete payload.deviceName;\ndelete payload.devEUI;\n\nmsg.payload = [];\nmsg.payload.push(payload);\nmsg.payload.push(device);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 200,
        "wires": [
            [
                "ea4d99d2ba299342",
                "a2bdacf0665d81ce"
            ]
        ]
    },
    {
        "id": "9ba7c5b18fc1083a",
        "type": "debug",
        "z": "52813cb27ee7a04f",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 340,
        "wires": []
    },
    {
        "id": "a2bdacf0665d81ce",
        "type": "influxdb out",
        "z": "52813cb27ee7a04f",
        "influxdb": "cb46eb49b0641803",
        "name": "",
        "measurement": "Sensor",
        "precision": "",
        "retentionPolicy": "",
        "database": "db0",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 730,
        "y": 120,
        "wires": []
    },
    {
        "id": "b7a97eec10133ed7",
        "type": "debug",
        "z": "6d95658a7bc87260",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 160,
        "wires": []
    },
    {
        "id": "cd73161b8ebc2dbe",
        "type": "http in",
        "z": "6d95658a7bc87260",
        "name": "",
        "url": "/alert",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 370,
        "y": 280,
        "wires": [
            [
                "b7a97eec10133ed7",
                "6c7c63d6e322095f",
                "0d0e0c0edb31e33e"
            ]
        ]
    },
    {
        "id": "6c7c63d6e322095f",
        "type": "http response",
        "z": "6d95658a7bc87260",
        "name": "OK",
        "statusCode": "200",
        "headers": {},
        "x": 630,
        "y": 280,
        "wires": []
    },
    {
        "id": "4d5ffd7ecc3a3f2b",
        "type": "link out",
        "z": "6d95658a7bc87260",
        "name": "link out triggerDevices",
        "mode": "link",
        "links": [
            "ab97912a09170366"
        ],
        "x": 845,
        "y": 380,
        "wires": []
    },
    {
        "id": "0d0e0c0edb31e33e",
        "type": "function",
        "z": "6d95658a7bc87260",
        "name": "process alert payload",
        "func": "var sensor = msg.payload;\nvar sensor_name = sensor.alerts[0].labels.alertname;\nvar paremeter = sensor.alerts[0].labels.grafana_folder;\nvar status = sensor.alerts[0].status;\n\nvar x = \"\";\n\nif (sensor_name.includes(\"AM319-Sensor_1\") && paremeter === \"CO2\"){\n    if (status === \"firing\") {\n        x = \"true\";\n    } else {\n        x = \"false\";\n    }\n}\n\nmsg.payload = '{\"commands\":[{\"code\":\"switch_1\",\"value\":'+ x +'}]}';\nmsg.time = Date.now();\nmsg.x = x;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 380,
        "wires": [
            [
                "4d5ffd7ecc3a3f2b"
            ]
        ]
    },
    {
        "id": "9b4bf30a356f2a27",
        "type": "inject",
        "z": "6d95658a7bc87260",
        "name": "testing",
        "props": [
            {
                "p": "timqqq",
                "v": "",
                "vt": "date"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"alerts\":[{\"status\":\"firing\",\"labels\":{\"alertname\":\"[CO2] AM319-Sensor_1 (>800) \",\"grafana_folder\":\"CO2\"},\"annotations\":{\"Mitigation\":\"Open windows or doors to allow fresh air to enter the space till the levels drop below 550ppm.\",\"value\":\"890\"},\"startsAt\":\"2024-03-16T01:59:00+08:00\",\"endsAt\":\"0001-01-01T00:00:00Z\",\"generatorURL\":\"http://localhost:3000/alerting/grafana/e226f23c-aca9-4e61-8826-31dddcc9af5b/view?orgId=1\",\"fingerprint\":\"45c12038deb2462a\",\"silenceURL\":\"http://localhost:3000/alerting/silence/new?alertmanager=grafana&matcher=alertname%3D%5BCO2%5D+AM319-Sensor_1+%28%3E800%29+&matcher=grafana_folder%3DCO2&orgId=1\",\"dashboardURL\":\"http://localhost:3000/d/c8a297eb-1b16-4e8a-84c8-620896b59074?orgId=1\",\"panelURL\":\"http://localhost:3000/d/c8a297eb-1b16-4e8a-84c8-620896b59074?orgId=1&viewPanel=1\",\"values\":{\"B\":890,\"C\":1},\"valueString\":\"[ var='B' labels={} value=890 ], [ var='C' labels={} value=1 ]\"}]}",
        "payloadType": "json",
        "x": 450,
        "y": 380,
        "wires": [
            [
                "0d0e0c0edb31e33e"
            ]
        ]
    },
    {
        "id": "2ba384c30b1e3525",
        "type": "comment",
        "z": "1db12a15ff463015",
        "name": "Get external parameters every 10 minutes",
        "info": "",
        "x": 260,
        "y": 80,
        "wires": []
    },
    {
        "id": "03600c78a04c7070",
        "type": "inject",
        "z": "1db12a15ff463015",
        "name": "Location input",
        "props": [
            {
                "p": "location.city",
                "v": "Singapore",
                "vt": "str"
            },
            {
                "p": "location.country",
                "v": "Singapore",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "e029b69ef31c45d1"
            ]
        ]
    },
    {
        "id": "e029b69ef31c45d1",
        "type": "openweathermap",
        "z": "1db12a15ff463015",
        "name": "Singapore",
        "wtype": "current",
        "lon": "",
        "lat": "",
        "city": "",
        "country": "",
        "language": "en",
        "x": 390,
        "y": 140,
        "wires": [
            [
                "0389199391458483",
                "0c23e6a8870aceec"
            ]
        ]
    },
    {
        "id": "0389199391458483",
        "type": "debug",
        "z": "1db12a15ff463015",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 200,
        "wires": []
    },
    {
        "id": "0c23e6a8870aceec",
        "type": "influxdb out",
        "z": "1db12a15ff463015",
        "influxdb": "cb46eb49b0641803",
        "name": "",
        "measurement": "Weather",
        "precision": "",
        "retentionPolicy": "",
        "database": "db0",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "organisation",
        "bucket": "bucket",
        "x": 680,
        "y": 100,
        "wires": []
    },
    {
        "id": "b35152d445e3e16b",
        "type": "inject",
        "z": "7b9f7c363480fe4d",
        "name": "OFF",
        "props": [
            {
                "p": "time",
                "v": "",
                "vt": "date"
            },
            {
                "p": "payload"
            },
            {
                "p": "x",
                "v": "false",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"commands\":[{\"code\":\"switch_1\",\"value\":false}]}",
        "payloadType": "str",
        "x": 110,
        "y": 520,
        "wires": [
            [
                "9d794d23425abd68"
            ]
        ]
    },
    {
        "id": "4e587d20270c0d82",
        "type": "function",
        "z": "7b9f7c363480fe4d",
        "name": "",
        "func": "var device_id = flow.get(\"device_id\");\nvar url = \"https://openapi.tuyaeu.com/v1.0/iot-03/devices/\" + device_id + \"/commands\";\nvar t = msg.time;\nvar client_id = flow.get(\"tuya_client_id\");\nvar creds = flow.get(\"tuya\");\nvar access_token = creds.access_token;\nvar sign = msg.payload;\n\nmsg.headers = {\n   \"sign_method\": \"HMAC-SHA256\",\n   \"client_id\": client_id,\n   \"t\": t.toString(),\n   \"mode\": \"cors\",\n   \"Content-Type\": \"application/json\",\n   \"sign\": sign.toUpperCase(),\n   \"access_token\": access_token,\n},\n\nmsg.payload = '{\"commands\":[{\"code\":\"switch_1\",\"value\":'+ msg.x +'}]}';\nmsg.url = url;\nmsg.method = \"POST\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 480,
        "wires": [
            [
                "257e71e2b83c021a"
            ]
        ]
    },
    {
        "id": "46c4ee517176dc98",
        "type": "inject",
        "z": "7b9f7c363480fe4d",
        "name": "ON",
        "props": [
            {
                "p": "time",
                "v": "",
                "vt": "date"
            },
            {
                "p": "payload"
            },
            {
                "p": "x",
                "v": "true",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"commands\":[{\"code\":\"switch_1\",\"value\":true}]}",
        "payloadType": "str",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "9d794d23425abd68"
            ]
        ]
    },
    {
        "id": "facfbf7b59874704",
        "type": "function",
        "z": "7b9f7c363480fe4d",
        "name": "Create signStr",
        "func": "var creds = flow.get(\"tuya\");\nvar access_token = creds.access_token;\nvar device_id = flow.get(\"device_id\");\nvar hashed_size = msg.payload;\nvar t = msg.time;\nvar client_id  = flow.get(\"tuya_client_id\");\nvar token = access_token;\nvar method = \"POST\";\nvar sign_url = \"/v1.0/iot-03/devices/\"+device_id+\"/commands\";\nvar content_hash = hashed_size;\nvar string_to_sign = method+\"\\n\"+content_hash+\"\\n\"+\"\"+\"\\n\"+sign_url;\nvar signStr = client_id+token+t+string_to_sign;\n\nmsg.payload = signStr;\nmsg.time = msg.time;\nmsg.x = msg.x\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 480,
        "wires": [
            [
                "c172d186b5cb4dea"
            ]
        ]
    },
    {
        "id": "c172d186b5cb4dea",
        "type": "hmac",
        "z": "7b9f7c363480fe4d",
        "name": "Sign signStr with secret",
        "algorithm": "HmacSHA256",
        "key": "e918febac9634d6da464f722d20ce792",
        "x": 730,
        "y": 480,
        "wires": [
            [
                "4e587d20270c0d82"
            ]
        ]
    },
    {
        "id": "9d794d23425abd68",
        "type": "digest",
        "z": "7b9f7c363480fe4d",
        "name": "Hash the body data",
        "algorithm": "SHA256",
        "x": 330,
        "y": 480,
        "wires": [
            [
                "facfbf7b59874704"
            ]
        ]
    },
    {
        "id": "257e71e2b83c021a",
        "type": "http request",
        "z": "7b9f7c363480fe4d",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1070,
        "y": 480,
        "wires": [
            [
                "7bbd6464633a3ad7"
            ]
        ]
    },
    {
        "id": "1ddaa0de66e2f186",
        "type": "function",
        "z": "7b9f7c363480fe4d",
        "g": "7eb49c80f3c13dfe",
        "name": "Extract Token ",
        "func": "var data = msg.payload;\nvar access = data.result.access_token;\nvar refresh = data.result.refresh_token;\n\nvar creds ={\n \"access_token\" : access,\n \"refresh_token\" : refresh\n}\nflow.set(\"tuya\", creds);\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 180,
        "wires": [
            [
                "e32195188da1da03"
            ]
        ]
    },
    {
        "id": "82b23c7906a733a6",
        "type": "function",
        "z": "7b9f7c363480fe4d",
        "g": "7eb49c80f3c13dfe",
        "name": "",
        "func": "var url = \"https://openapi.tuyaeu.com/v1.0/token?grant_type=1\";\nvar t = msg.time;\nvar sign = msg.payload;\nvar client_id  = flow.get(\"tuya_client_id\");\nmsg.headers ={\n \"sign_method\": \"HMAC-SHA256\",\n \"client_id\" : client_id,\n \"t\": t.toString(),\n \"sign\": sign.toUpperCase(),\n },\n msg.payload = '';\n msg.url = url;\n msg.method = \"GET\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 180,
        "wires": [
            [
                "fc645a560a7d65ba"
            ]
        ]
    },
    {
        "id": "fc645a560a7d65ba",
        "type": "http request",
        "z": "7b9f7c363480fe4d",
        "g": "7eb49c80f3c13dfe",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 180,
        "wires": [
            [
                "1ddaa0de66e2f186"
            ]
        ]
    },
    {
        "id": "18ad8de8e5b0317d",
        "type": "inject",
        "z": "7b9f7c363480fe4d",
        "g": "7eb49c80f3c13dfe",
        "name": "Get Access Token",
        "props": [
            {
                "p": "time",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "a6df3261001f3b45"
            ]
        ]
    },
    {
        "id": "a6df3261001f3b45",
        "type": "function",
        "z": "7b9f7c363480fe4d",
        "g": "7eb49c80f3c13dfe",
        "name": "Create signStr",
        "func": "var client_id  = flow.get(\"tuya_client_id\");\nvar t = msg.time;\n\n\nvar method = \"GET\";\nvar sign_url = \"/v1.0/token?grant_type=1\";\n\n// Couldn't get nodered to process an empty string so this is a hash of an empty file\nvar content_hash = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\nvar string_to_sign = method+\"\\n\"+content_hash+\"\\n\"+\"\"+\"\\n\"+sign_url;\nvar signStr = client_id+t+string_to_sign;\n\nmsg.payload = signStr;\nmsg.time = msg.time;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 180,
        "wires": [
            [
                "82e3e80093cc5364"
            ]
        ]
    },
    {
        "id": "82e3e80093cc5364",
        "type": "hmac",
        "z": "7b9f7c363480fe4d",
        "g": "7eb49c80f3c13dfe",
        "name": "Sign signStr with secret",
        "algorithm": "HmacSHA256",
        "key": "e918febac9634d6da464f722d20ce792",
        "x": 550,
        "y": 180,
        "wires": [
            [
                "82b23c7906a733a6"
            ]
        ]
    },
    {
        "id": "a81a9187a8cbc358",
        "type": "function",
        "z": "7b9f7c363480fe4d",
        "g": "7eb49c80f3c13dfe",
        "name": "Inital Values Setup (ID and flow)",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "var client_id = \"dq9cmggkruqmwdpgksgh\";\nvar user_id = \"53LD3QMV\";\nvar device_id = \"bf84186ffdd948c36dtf3x\";\nflow.set(\"tuya_client_id\", client_id);\nflow.set(\"tuya_user_id\", user_id);\nflow.set(\"device_id\", device_id);",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "45a23539726a3eab",
        "type": "comment",
        "z": "7b9f7c363480fe4d",
        "name": "This is a Air purifier and is at sensor 1's location (Auto On/Off on event trigger from alert)",
        "info": "",
        "x": 540,
        "y": 520,
        "wires": []
    },
    {
        "id": "ab97912a09170366",
        "type": "link in",
        "z": "7b9f7c363480fe4d",
        "name": "link in triggerDevices",
        "links": [
            "4d5ffd7ecc3a3f2b"
        ],
        "x": 165,
        "y": 340,
        "wires": [
            [
                "9d794d23425abd68"
            ]
        ]
    },
    {
        "id": "e32195188da1da03",
        "type": "debug",
        "z": "7b9f7c363480fe4d",
        "g": "7eb49c80f3c13dfe",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 180,
        "wires": []
    },
    {
        "id": "31d11b335763e7e0",
        "type": "comment",
        "z": "7b9f7c363480fe4d",
        "g": "7eb49c80f3c13dfe",
        "name": "Getting access token to comminicate to the tuya API (Trigger in Intervals)",
        "info": "",
        "x": 300,
        "y": 140,
        "wires": []
    },
    {
        "id": "7bbd6464633a3ad7",
        "type": "debug",
        "z": "7b9f7c363480fe4d",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.result",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 480,
        "wires": []
    }
]